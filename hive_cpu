#!/usr/bin/env python

import sys
import os
import subprocess
import pymongo
import re

def getModules():
    if 'HIVE_DB_URI' in os.environ:
        uri = os.environ['HIVE_DB_URI']
    c = pymongo.MongoClient(uri)
    db_name = uri.split('/')[-1].strip()
    proj = {"$project" : {"_id" : 1.0, "description" : "$description","name" : "$name"}}
    return c[db_name].get_collection("hiveavailablemodules").aggregate([proj])

def getModuleRequirements(ip):
    if 'HIVE_DB_URI' in os.environ:
        uri = os.environ['HIVE_DB_URI']
    c = pymongo.MongoClient(uri)
    db_name = uri.split('/')[-1].strip()
    rgx = re.compile("^"+ip+"."+".*")
    pipeline = [
        { "$match" : { "$or": [{ "hostname" : ip }, { "hostname" : rgx }]}}, 
        { "$project" : { "_id" : 1.0, "hostname" : 1.0, "name" : 1.0}}, 
        { "$lookup" : { 
            "from" : "hivemachines", 
            "let" : { "hostname" : "$hostname"}, 
            "pipeline" : [
              { "$match" : {  "$expr": {"$and":[{"$eq":["$$hostname", "$name" ] },{"$eq":["$active", True ] }]}}}, 
              { "$project" : { 
              "_id" : 0.0, 
              "has_gpu" : { "$cond" : [{ "$gt" : ["$hardware.gpu.count", 0]}, 1,0]}}}], 
            "as" : "machines"}}, 
        { "$unwind" : { 
            "path" : "$machines"}}, 
        { "$lookup" : { 
            "from" : "hiveavailablemodules", 
            "let" : { 
              "module_id" : "$_id", 
              "hostname" : "$hostname", 
              "name" : "$name", 
              "has_gpu" : "$machines.has_gpu"}, 
            "pipeline" : [
              { "$match" : { "$expr" : { "$eq" : [{ "$concat" : ["hive.", { "$substr" : ["$_id", 5.0, -1.0]}]}, "$$name"]}}}, 
              { "$project" : { 
                  "_id" : 0.0, 
                  "cpu_when_gpu" : { "$multiply" : ["$hardware.cpu_when_gpu_available", "$$has_gpu"]}, 
                  "cpu" : {"$multiply" : ["$hardware.cpu", { "$subtract" : [1, "$$has_gpu"]}]}, 
                  "gpu" : {"$multiply" : ["$hardware.gpu", "$$has_gpu"]}}}], 
            "as" : "active_module"}}, 
        { "$unwind" : {"path" : "$active_module"}}, 
        { "$project" : { "name" : "$name", 
            "total_cpu" : { "$sum" : ["$active_module.cpu", "$active_module.cpu_when_gpu"]}, 
            "gpu" : "$active_module.gpu"}}, 
        { "$group" : { "_id" : {"$concat" : ["hive_", {"$substr" : ["$name", 5.0, -1.0]}]}, 
            "cpu" : {"$sum" : "$total_cpu"},  
            "gpu" : {"$sum" : "$gpu"}}}]

    return c[db_name].get_collection("hivemodules").aggregate(pipeline)

def get_ip():
    ip_command = "ip route get 1 | awk '{print $NF;exit}'"
    p = subprocess.Popen([ip_command], stdout=subprocess.PIPE, shell=True)
    output = p.stdout.read().decode('utf-8')
    ip = output.replace('.','-').strip()
    ip = "ip-"+ip
    return ip

def doData():
    ip = get_ip()
    jj = {}
    for j in getModules():
        jj[j["_id"]] = 0
    for k in getModuleRequirements(ip):
        jj[k["_id"]] += k["cpu"]
    for jkey, jval in jj.items():
        print( jkey + ".value " + str(jval) )

def doConfig():
    print "graph_title CPU hive requirements"
    print "graph_args --base 1000 -l 0"
    print "graph_vlabel CPUs"
    print "graph_category system"
    print "graph_total total"
    for k in getModules():
        kname = k["_id"]
        print(kname + ".label " + k["name"])
        print(kname + ".info " + k["description"])
        print kname + ".type GAUGE"
        print kname + ".min 0"
        print kname + ".draw AREASTACK"

if __name__ == "__main__":
    from os import environ
    if 'HIVE_DB_URI' in environ:
        uri = environ['HIVE_DB_URI']

    if len(sys.argv) > 1 and sys.argv[1] == "config":
        doConfig()
    else:
        doData()
