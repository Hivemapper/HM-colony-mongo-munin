#!/usr/bin/env python

import sys
import os
import pymongo
import datetime as dt
import calendar
from os.path import expanduser

knames = {"registered":"Registered", "ungeoreg":"Failed Georegistration", "unsatreg":"Failed Satregistration", "failed":"Failed Registration"}
def getModelData(ts, now):
    if 'HIVE_DB_URI' in os.environ:
        uri = os.environ['HIVE_DB_URI']
    c = pymongo.MongoClient(uri)
    db_name = uri.split('/')[-1].strip()
    dd = {}
    dd["registered"] = c[db_name].get_collection("hivejobs").find({"state_last_updated":{"$gt":ts,"$lte":now},
                                                       "pipeline_name":"waggle",
                                                       "state":"finished"}).count()
    dd["ungeoreg"] = c[db_name].get_collection("hivejobs").find({"state_last_updated":{"$gt":ts,"$lte":now},
                                                       "pipeline_name":"waggle","state":"failed",
                                                       "current_module_name":"hive.georegistration",
                                                       "error_message":"Failed to register with sufficient confidence\n"}).count()
    dd["unsatreg"] = c[db_name].get_collection("hivejobs").find({"state_last_updated":{"$gt":ts,"$lte":now},
                                                       "pipeline_name":"waggle",
                                                       "state":"failed",
                                                       "current_module_name":"hive.imagery"}).count()
    dd["failed"] = c[db_name].get_collection("hivejobs").find({"state_last_updated":{"$gt":ts,"$lte":now},
                                                       "$or":[{"pipeline_name":"waggle"},{"pipeline_name":"preprocessing"}],
                                                       "state":"failed"}).count() - (dd["ungeoreg"] + dd["unsatreg"])

    return dd

def doData():
    current = dt.datetime.utcnow()
    now = calendar.timegm(current.timetuple())
    homedir = expanduser("~")
    timedir = os.path.join(homedir, 'dbtimes')
    if not os.path.exists(timedir):
      os.makedirs(timedir)
    timefile = os.path.join(timedir, os.path.basename(__file__) + ".time")
    ts = 0
    # Get last saved "now" value as "ts" if exists or subtract 5 minutes from current
    if os.path.exists(timefile):
        with open(timefile, 'r') as f:
            ts = map(int, f.readlines())[0]
        # print("Got ", ts)
    with open(timefile, 'w') as f:
        # save now for next use
        f.write('%d\n' % now)
        # print("Saved ", now)
    if ts < 1589233177 or ts >= now:
        start = current - dt.timedelta(minutes=5)
        ts = calendar.timegm(start.timetuple())
    #     print("No valid saved value so using calculated ts of ", ts)
    # else:
    #     print("Using saved value ", ts)

    modelDict = getModelData(ts, now)
    for kname, name in knames.items():
        print( kname + ".value " + str(modelDict[kname]) )

def doConfig():
    print "graph_title Hive finished models"
    print "graph_args --base 1000 -l 0"
    print "graph_vlabel Number"
    print "graph_category mongodb"
    print "graph_total total"

    for kname, name in knames.items():
        print(kname + ".label " + name)
        print(kname + ".info " + name)
        print kname + ".type GAUGE"
        print kname + ".min 0"
        print kname + ".draw AREASTACK"


if __name__ == "__main__":
    from os import environ
    if 'HIVE_DB_URI' in environ:
        uri = environ['HIVE_DB_URI']

    if len(sys.argv) > 1 and sys.argv[1] == "config":
        doConfig()
    else:
        doData()
