#!/usr/bin/env python3

import sys
import os
import subprocess
import pymongo
import re

def getModules():
    if 'HIVE_DB_URI' in os.environ:
        uri = os.environ['HIVE_DB_URI']
    c = pymongo.MongoClient(uri)
    db_name = uri.split('/')[-1].strip()
    proj = {"$project" : {"_id" : 1.0, "description" : "$description","name" : "$name"}}
    return c[db_name].get_collection("hiveavailablemodules").aggregate([proj])

def getModuleRequirements(ip):
    if 'HIVE_DB_URI' in os.environ:
        uri = os.environ['HIVE_DB_URI']
    c = pymongo.MongoClient(uri)
    db_name = uri.split('/')[-1].strip()
    rgx = re.compile("^"+ip+"\..*")
    pipeline = [
        { "$match" : { "$or": [{ "hostname" : ip }, { "hostname" : rgx }]}},
        {"$lookup": {
          "from": "hivejobs",
          "let" : {
            "module_id" : "$_id"},
          "pipeline" : [
          {"$match" : {"state": "active"}},
          {"$project": {"_id": "$current_module_id", "state": "$state", "high_ram":"$high_ram"}},
          {"$match" : {"$expr" : {"$eq" : ["$$module_id","$_id"]}}}],
          "as" : "activejobs"}},
        {"$unwind": {
            "path": "$activejobs",
            "preserveNullAndEmptyArrays":True}},
        { "$match": {
              "$or":[{"activejobs.state":"active"},{"name":"hive.api"}]}},
        { "$project" : { "_id" : 1.0, "hostname" : 1.0, "name" : 1.0, "high_ram":"$activejobs.high_ram"}},
        { "$lookup" : {
            "from" : "hivemachines",
            "let" : { "hostname" : "$hostname"},
            "pipeline" : [
              { "$match" : {  "$expr": {"$and":[{"$eq":["$$hostname", "$name" ] },{"$ne":["$active", False ] }]}}},
              { "$project" : {
                  "_id" : 0.0 }}],
            "as" : "machines"}},
        { "$unwind" : {
            "path" : "$machines"}},
        { "$lookup" : {
            "from" : "hiveavailablemodules",
            "let" : {
              "module_id" : "$_id",
              "hostname" : "$hostname",
              "name" : "$name",
              "is_high_ram":"$high_ram"},
            "pipeline" : [
              { "$match" : { "$expr" : { "$eq" : [{ "$concat" : ["hive.", { "$substr" : ["$_id", 5.0, -1.0]}]}, "$$name"]}}},
              { "$project" : {
                  "_id" : 0.0,
                  "ram": {"$cond":[ { "$ne": ["$$is_high_ram", True]  }, "$hardware.ram", "$hardware.ram_high"]}}}],
            "as" : "active_module"}},
        { "$unwind" : {"path" : "$active_module"}},
        { "$project" : { "name" : "$name",
            "ram" : "$active_module.ram"}},
        { "$group" : { "_id" : {"$concat" : ["hive_", {"$substr" : ["$name", 5.0, -1.0]}]},
            "ram" : {"$sum" : "$ram"}}}]

    return c[db_name].get_collection("hivemodules").aggregate(pipeline)

def get_ip():
    ip_command = "hostname"
    p = subprocess.Popen([ip_command], stdout=subprocess.PIPE, shell=True)
    output = p.stdout.read().decode('utf-8')
    ip = output.strip()
    return ip

def doData():
    ip = get_ip()
    jj = {}
    for j in getModules():
        jj[j["_id"]] = 0
    for k in getModuleRequirements(ip):
        jj[k["_id"]] += k["ram"]
    for jkey, jval in list(jj.items()):
        print(( jkey + ".value " + str(jval) ))

def doConfig():
    print("graph_title Memory hive requirements")
    print("graph_args --base 1000 -l 0")
    print("graph_vlabel Memory (Gb)")
    print("graph_category system")
    print("graph_total total")
    for k in getModules():
        kname = k["_id"]
        print((kname + ".label " + k["name"]))
        print((kname + ".info " + k["description"]))
        print(kname + ".type GAUGE")
        print(kname + ".min 0")
        print(kname + ".draw AREASTACK")

if __name__ == "__main__":
    from os import environ
    if 'HIVE_DB_URI' in environ:
        uri = environ['HIVE_DB_URI']

    if len(sys.argv) > 1 and sys.argv[1] == "config":
        doConfig()
    else:
        doData()
